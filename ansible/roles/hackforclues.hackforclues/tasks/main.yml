---
# tasks file for hackforclues.hackforclues

# - name: Add EPEL repository
#   yum: name=epel-release state=present

- name: Shut down service for maintenance
  service: name=hackforclues state=stopped
  ignore_errors: yes

- name: Install aptitude needed by system upgrade
  apt: name=aptitude state=present

- name: Upgrade system
  apt: upgrade=safe

- name: Install dependencies
  apt: name={{ item }} state=latest
  with_items:
    - python3-pip
    - python3-dev
    - python3-venv
    - python-psycopg2 # Needed for postgresql modules
    - libpq-dev
    - postgresql
    - postgresql-contrib
    - nginx

- name: Enable and start postgresql
  service: name=postgresql enabled=yes state=started

- name: Create hackforclues database
  postgresql_db: name="{{ hackforclues_db }}"
  become_user: postgres

- name: Create hackforclues user
  user: name="{{ hackforclues_user }}"

- name: Create hackforclues postgres user
  postgresql_user:
    db="{{ hackforclues_db }}"
    name="{{ hackforclues_user }}"
    password="{{ hackforclues_psql_password }}"
  become_user: postgres

- name: Delete app directory
  file:
    path="{{ hackforclues_path }}"
    state=absent

- name: Create service root folder
  file:
    path="{{ hackforclues_root }}"
    state=directory
    mode=755
    owner="{{ hackforclues_user }}"
    group="{{ hackforclues_user }}"

# TODO: there is certainly a better way to deploy the code than rsyncing it
# over.
- name: Copy over app
  synchronize:
    src="../../../../"
    dest="{{ hackforclues_path }}"

- name: Disable debug mode
  lineinfile:
    dest="{{ hackforclues_settings }}"
    regexp="^DEBUG[ =]"
    line="DEBUG = False"

- name: Change secret key
  lineinfile:
    dest="{{ hackforclues_settings }}"
    regexp="^SECRET_KEY[ =]"
    line='SECRET_KEY = "{{ hackforclues_secret_key }}"'

- name: Add allowed hosts
  lineinfile:
    dest="{{ hackforclues_settings }}"
    regexp="^ALLOWED_HOSTS[ =]"
    line='ALLOWED_HOSTS = ["{{ hackforclues_hostname }}"]'

- name: Set permissions
  file:
    path="{{ hackforclues_path }}"
    state=directory
    recurse=yes
    mode=755
    owner="{{ hackforclues_user }}"
    group="{{ hackforclues_www_group }}"

- name: Initialize virtualenv
  pip:
    requirements="{{ hackforclues_path }}/requirements.txt"
    virtualenv="{{ hackforclues_venv }}"
    virtualenv_command=pyvenv
  become_user: "{{ hackforclues_user }}"

- name: Run migrations
  command: "{{ hackforclues_venv }}/bin/python {{ hackforclues_manage_py }} migrate"
  become_user: "{{ hackforclues_user }}"

- name: Collect static files
  command: "{{ hackforclues_venv }}/bin/python {{ hackforclues_manage_py }} collectstatic --noinput"
  become_user: "{{ hackforclues_user }}"

- name: Deploy systemd service
  template: src=hackforclues.service dest=/etc/systemd/system/hackforclues.service

# TODO: systemctl module in Ansible 2.2
- name: Reload daemon files
  command: systemctl daemon-reload

- name: Enable and restart systemd service
  service: name=hackforclues enabled=yes state=restarted

- name: Set letsencrypt fact to false to deploy http-only version of nginx config
  set_fact:
    hackforclues_letsencrypt: False

- name: Deploy nginx config
  template: src=hackforclues.nginx dest="{{ hackforclues_nginx_available }}"

- name: Enable nginx config
  file:
    src="{{ hackforclues_nginx_available }}"
    dest="{{ hackforclues_nginx_enabled }}"
    state=link

- name: Delete default nginx config
  file:
    path=/etc/nginx/sites-enabled/default
    state=absent

- name: Enable and restart nginx service
  service: name=nginx enabled=yes state=reloaded

# letsencrypt setup starts here

- name: Install letsencrypt
  apt: name=letsencrypt state=latest

- name: Create letsencrypt webroot folder
  file:
    name="{{ hackforclues_letsencrypt_webroot_path }}"
    state=directory
    group="{{ hackforclues_www_group }}"
    mode=755

- name: Create letsencrypt config folder
  file:
    name="{{ hackforclues_letsencrypt_config_directory }}"
    state=directory

- name: Deploy letsencrypt config
  template:
    src=hackforclues.letsencrypt
    dest="{{ hackforclues_letsencrypt_config }}"

- name: Check if certificate exists
  stat: path="{{ hackforclues_cert_path }}"
  register: hackforclues_cert_found

- name: Get the certificate
  command: "letsencrypt certonly --config {{ hackforclues_letsencrypt_config }} --agree-tos"
  args:
    creates="{{ hackforclues_cert_path }}"
  when: not hackforclues_cert_found.stat.exists

- name: Set letsencrypt fact to true to deploy https version of nginx config
  set_fact:
    hackforclues_letsencrypt: True

- name: Deploy nginx config
  template: src=hackforclues.nginx dest="{{ hackforclues_nginx_available }}"

- name: Restart nginx service
  service: name=nginx state=reloaded

- name: Deploy certificate renewal service
  template:
    src=hackforclues.letsencrypt.service
    dest=/etc/systemd/system/letsencrypt.service

- name: Deploy certificate renewal timer
  template:
    src=hackforclues.letsencrypt.timer
    dest="/etc/systemd/system/{{ hackforclues_letsencrypt_timer }}"

- name: Enable certificate renewal timer
  service:
    name="{{ hackforclues_letsencrypt_timer }}"
    enabled=yes

# Backup functionality
- name: Install autopostgresqlbackup
  apt: name=autopostgresqlbackup state=present

- name: Deploy backup service
  template:
    src=autopostgresqlbackup.service
    dest=/etc/systemd/system/autopostgresqlbackup.service

- name: Deploy backup timer
  template:
    src=autopostgresqlbackup.timer
    dest="/etc/systemd/system/{{ hackforclues_autopostgresqlbackup_timer }}"

# TODO: systemctl module in Ansible 2.2
- name: Reload daemon files
  command: systemctl daemon-reload

- name: Enable backup timer
  service:
    name="{{ hackforclues_autopostgresqlbackup_timer }}"
    enabled=yes
